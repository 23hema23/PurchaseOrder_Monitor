CLASS zcl_po_monitor_scheduler DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES if_oo_adt_classrun.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS zcl_po_monitor_scheduler IMPLEMENTATION.

  METHOD if_oo_adt_classrun~main.

    DATA lv_template_name TYPE cl_apj_rt_api=>ty_template_name.

    DATA : ls_start_info      TYPE cl_apj_rt_api=>ty_start_info,
           ls_scheduling_info TYPE cl_apj_rt_api=>ty_scheduling_info,
           ls_end_info        TYPE cl_apj_rt_api=>ty_end_info,
           lt_job_parameters  TYPE cl_apj_rt_api=>tt_job_parameter_value,
           ls_job_parameters  TYPE cl_apj_rt_api=>ty_job_parameter_value,
           ls_value           TYPE cl_apj_rt_api=>ty_value_range,
           lv_job_text        TYPE cl_apj_rt_api=>ty_job_text,
           lv_job             TYPE cl_apj_rt_api=>ty_job_details,
           lv_status          TYPE cl_apj_rt_api=>ty_job_status,
           lv_statustext      TYPE cl_apj_rt_api=>ty_job_status_text.

*     fill parameter table

*   Data collector 1 ( PO created within 30 days and Pay term > 100 days)
    ls_job_parameters-name = 'S_PO_CRE'.
    CLEAR ls_value.
    ls_value-sign = 'I'.
    ls_value-option = 'GE'.
    ls_value-low = '30'.
    APPEND ls_value TO ls_job_parameters-t_value.
    APPEND ls_job_parameters TO lt_job_parameters.
    CLEAR ls_job_parameters.

    ls_job_parameters-name = 'S_PAYTER'.
    CLEAR ls_value.
    ls_value-sign = 'I'.
    ls_value-option = 'GT'.
    ls_value-low = '100'.
    APPEND ls_value TO ls_job_parameters-t_value.
    APPEND ls_job_parameters TO lt_job_parameters.
    CLEAR ls_job_parameters.


**************************************************************
*   Add more parameters for additional data collector here
**************************************************************

*   name of job template
    lv_template_name = 'ZPO_MONITOR_TPL'.

*   immediate start
    ls_start_info-start_immediately = 'X'.

*   Job text
    lv_job_text = 'Job to Minitor PO'.

*   schedule job
    TRY.

* If you pass the table lt_job_parameters , then the parameters
* contained in this table are used.
* If you don't pass the table, the parameters contained in the
* job template are used.

        cl_apj_rt_api=>schedule_job(
          EXPORTING
            iv_job_template_name   = lv_template_name
            iv_job_text            = lv_job_text
            is_start_info          = ls_start_info
            is_scheduling_info     = ls_scheduling_info
            is_end_info            = ls_end_info
            it_job_parameter_value = lt_job_parameters
          IMPORTING
            ev_jobname             = lv_job-job_name
            ev_jobcount            = lv_job-job_count
        ).

      CATCH cx_apj_rt INTO DATA(exc_sch).
*      handle exception
    ENDTRY.

    TRY.

        cl_apj_rt_api=>get_job_status(
          EXPORTING
            iv_jobname         = lv_job-job_name
            iv_jobcount        = lv_job-job_count
          IMPORTING
            ev_job_status      = lv_status
            ev_job_status_text = lv_statustext
        ).

      CATCH cx_apj_rt_content INTO DATA(exc_Status).
*      handle exception
    ENDTRY.

    out->write( 'Job status :' && lv_statustext  ).

  ENDMETHOD.

ENDCLASS.
